<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="me.jy.rds.overtime.dao.OvertimeMapper" >
  <resultMap id="BaseResultMap" type="me.jy.rds.overtime.model.Overtime" >
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="user_id" property="userId" jdbcType="BIGINT" />
    <result column="date" property="date" jdbcType="DATE" />
    <result column="reason" property="reason" jdbcType="VARCHAR" />
    <result column="flag" property="flag" jdbcType="BIT" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, user_id, date, reason, flag
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="me.jy.rds.overtime.model.OvertimeExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from overtime
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Column_List" />
    from overtime
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from overtime
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="me.jy.rds.overtime.model.OvertimeExample" >
    delete from overtime
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="me.jy.rds.overtime.model.Overtime" >
    insert into overtime (id, user_id, date, 
      reason, flag)
    values (#{id,jdbcType=BIGINT}, #{userId,jdbcType=BIGINT}, #{date,jdbcType=DATE}, 
      #{reason,jdbcType=VARCHAR}, #{flag,jdbcType=BIT})
  </insert>
  <insert id="insertSelective" parameterType="me.jy.rds.overtime.model.Overtime" >
    insert into overtime
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="userId != null" >
        user_id,
      </if>
      <if test="date != null" >
        date,
      </if>
      <if test="reason != null" >
        reason,
      </if>
      <if test="flag != null" >
        flag,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=BIGINT},
      </if>
      <if test="userId != null" >
        #{userId,jdbcType=BIGINT},
      </if>
      <if test="date != null" >
        #{date,jdbcType=DATE},
      </if>
      <if test="reason != null" >
        #{reason,jdbcType=VARCHAR},
      </if>
      <if test="flag != null" >
        #{flag,jdbcType=BIT},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="me.jy.rds.overtime.model.OvertimeExample" resultType="java.lang.Integer" >
    select count(*) from overtime
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update overtime
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.userId != null" >
        user_id = #{record.userId,jdbcType=BIGINT},
      </if>
      <if test="record.date != null" >
        date = #{record.date,jdbcType=DATE},
      </if>
      <if test="record.reason != null" >
        reason = #{record.reason,jdbcType=VARCHAR},
      </if>
      <if test="record.flag != null" >
        flag = #{record.flag,jdbcType=BIT},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update overtime
    set id = #{record.id,jdbcType=BIGINT},
      user_id = #{record.userId,jdbcType=BIGINT},
      date = #{record.date,jdbcType=DATE},
      reason = #{record.reason,jdbcType=VARCHAR},
      flag = #{record.flag,jdbcType=BIT}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="me.jy.rds.overtime.model.Overtime" >
    update overtime
    <set >
      <if test="userId != null" >
        user_id = #{userId,jdbcType=BIGINT},
      </if>
      <if test="date != null" >
        date = #{date,jdbcType=DATE},
      </if>
      <if test="reason != null" >
        reason = #{reason,jdbcType=VARCHAR},
      </if>
      <if test="flag != null" >
        flag = #{flag,jdbcType=BIT},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="me.jy.rds.overtime.model.Overtime" >
    update overtime
    set user_id = #{userId,jdbcType=BIGINT},
      date = #{date,jdbcType=DATE},
      reason = #{reason,jdbcType=VARCHAR},
      flag = #{flag,jdbcType=BIT}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <!--   ********************************************打印统计*********************************************   -->

  <!-- 误餐补助统计-->
  <select id="getMissPrintData" resultMap="BaseResultMap" parameterType="me.jy.rds.overtime.model.Overtime" >
   SELECT DATE,GROUP_CONCAT(userName) userNameArr,GROUP_CONCAT(reason ) reasonArr,GROUP_CONCAT(flag) flagArr FROM
(SELECT (SELECT NAME FROM org_user WHERE id=overtime.`user_id`) userName,DATE,reason,flag FROM overtime WHERE DATE BETWEEN #{startDate} AND #{endDate})
a  GROUP BY DATE,flag
  </select>

  <!-- 补助费申请审批表统计-->
  <select id="getTrialPrintData" resultMap="BaseResultMap" parameterType="me.jy.rds.overtime.model.Overtime" >
SELECT COUNT(1) count,userName,GROUP_CONCAT(reason) reasonArr  FROM
(SELECT user_id,(SELECT NAME FROM org_user WHERE id=overtime.`user_id`) userName,DATE,reason,flag FROM overtime WHERE DATE BETWEEN #{startDate} AND #{endDate})
a  GROUP BY user_id,userName
  </select>
</mapper>